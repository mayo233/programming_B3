# -*- coding: utf-8 -*-
"""課題４.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19BUvKBnJpFZwvCeV4ojTySHidaP9hqVP
"""

#tensorflowを使用した行列演算プログラム１の改造  placeholderを活用
import tensorflow.compat. v1 as tf
tf.disable_v2_behavior()
import numpy as np

#計算グラフ定義

#ベクトルの定義  vector1,2でそれぞれ指定した行列のモデルを作成
vector1=tf.placeholder(tf.int32,shape=[2]) #２行1列
vector2=tf.placeholder(tf.int32,shape=[2]) #2行１列

#行列の定義 ベクトルと同様
matrix1=tf.placeholder(tf.int32,shape=[2,2])
matrix2=tf.placeholder(tf.int32,shape=[2,2])

#ベクトルの加算　まだ値は入ってない
add1=vector1+vector2

#行列の加算 まだ値は入ってない
add2=matrix1+matrix2

#実行 
sess=tf.Session()

#sess.runの際に辞書型の引数としてプレースホルダの名前と値を指定して渡す
print("add vector\t:\n",sess.run(add1,feed_dict={vector1:[1,2],vector2:[2,1]})) #ここで作成したデータを変数に渡す
print("add matrix\t:\n",sess.run(add2,feed_dict={matrix1:[[1,2],[3,4]],matrix2:[[3,4],[1,2]]})) #vector1,2と同様

sess.close()

#tensorflowを使用した行列演算プログラム2  変数を活用
import tensorflow.compat. v1 as tf
tf.disable_v2_behavior()

#計算グラフ定義

#行列の変数を作成 　これらは実行された後も変数の値が保持される メモリ上に作成はしない　枠のみ
matrix1=tf.Variable([[1,2],[3,4],[5,6]])
matrix2=tf.Variable([[1,2,3],[4,5,6]])

#ベクトルの加算 
matmul=tf.matmul(matrix1,matrix2)

#実行
sess=tf.Session()  #tfを実行してここから変数
sess.run(tf.global_variables_initializer()) #初期化
print("matmul\t:\n",sess.run(matmul)) #実行された変数の中身を表示

sess.close()

